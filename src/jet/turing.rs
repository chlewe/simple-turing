use crate::jet::application::Turing;
use bitcoin_hashes::sha256::Midstate;
use simplicity::jet::type_name::TypeName;
use simplicity::jet::JetNode;
use simplicity::merkle::cmr::Cmr;

#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
pub enum TuringJetName {
    Eq256,
    RightShift256,
    LeftShift256,
    Complement256,
    And256,
    Or256,
    IsZero256,
}

pub const EQ256: JetNode<Turing> = JetNode {
    name: TuringJetName::Eq256,
    cmr: Cmr(Midstate([
        0xf0, 0x95, 0x9d, 0x3c, 0xb9, 0x2c, 0x72, 0x8c, 0xd0, 0x86, 0x26, 0x81, 0x71, 0xaa, 0x1f,
        0xdd, 0x5c, 0x97, 0x4c, 0xbe, 0x3f, 0xf6, 0x4a, 0x09, 0x94, 0x13, 0x28, 0x76, 0x6d, 0x24,
        0xbf, 0xf1,
    ])),
    source_ty: TypeName(b"*hh"),
    target_ty: TypeName(b"2"),
};

pub const RIGHT_SHIFT_256: JetNode<Turing> = JetNode {
    name: TuringJetName::RightShift256,
    cmr: Cmr(Midstate([
        0x01, 0x6d, 0x32, 0x48, 0xee, 0x72, 0x7e, 0xb7, 0x27, 0xc3, 0x3a, 0xa6, 0xf2, 0xcf, 0xb8,
        0xb8, 0x7e, 0x7d, 0x07, 0x46, 0x55, 0x40, 0xdc, 0x3f, 0x9a, 0xb3, 0x22, 0x93, 0x78, 0x85,
        0x2a, 0xc7,
    ])),
    source_ty: TypeName(b"h"),
    target_ty: TypeName(b"h"),
};

pub const LEFT_SHIFT_256: JetNode<Turing> = JetNode {
    name: TuringJetName::LeftShift256,
    cmr: Cmr(Midstate([
        0x34, 0x73, 0xfa, 0x10, 0xe0, 0xe7, 0xd9, 0x80, 0x2d, 0x53, 0x3b, 0x13, 0x01, 0xb2, 0x09,
        0x83, 0x85, 0x92, 0xb3, 0x1a, 0xf9, 0xd9, 0x14, 0xb0, 0xe7, 0x46, 0x11, 0x32, 0xf5, 0x3d,
        0x79, 0x7a,
    ])),
    source_ty: TypeName(b"h"),
    target_ty: TypeName(b"h"),
};

pub const COMPLEMENT_256: JetNode<Turing> = JetNode {
    name: TuringJetName::Complement256,
    cmr: Cmr(Midstate([
        0x02, 0x44, 0x52, 0xa5, 0x7a, 0xc5, 0x8c, 0xd0, 0xa1, 0x97, 0x57, 0xbb, 0xf1, 0x68, 0xa3,
        0xa8, 0xcb, 0x6a, 0x02, 0x38, 0xa8, 0x0f, 0x61, 0x81, 0x3e, 0xf7, 0x9c, 0x92, 0x6c, 0x8f,
        0x08, 0x9e,
    ])),
    source_ty: TypeName(b"h"),
    target_ty: TypeName(b"h"),
};

pub const AND_256: JetNode<Turing> = JetNode {
    name: TuringJetName::And256,
    cmr: Cmr(Midstate([
        0x47, 0xe0, 0xca, 0x35, 0x3a, 0x6f, 0x93, 0x4b, 0xd9, 0x97, 0x5d, 0xfe, 0x04, 0x27, 0x62,
        0x96, 0x42, 0x94, 0xf7, 0x51, 0xd1, 0xd4, 0x6d, 0x39, 0xcf, 0xa5, 0xee, 0x5f, 0x3a, 0x37,
        0x8b, 0xfd,
    ])),
    source_ty: TypeName(b"*hh"),
    target_ty: TypeName(b"h"),
};

pub const OR_256: JetNode<Turing> = JetNode {
    name: TuringJetName::Or256,
    cmr: Cmr(Midstate([
        0x32, 0x61, 0x8d, 0x01, 0xfb, 0xfe, 0x81, 0x9f, 0x29, 0x69, 0xb7, 0x1c, 0xda, 0xbf, 0x40,
        0x5d, 0xde, 0x3d, 0xa1, 0x7c, 0x04, 0x45, 0xe8, 0xd0, 0x53, 0x47, 0x65, 0x7c, 0x5b, 0x53,
        0x2f, 0x72,
    ])),
    source_ty: TypeName(b"*hh"),
    target_ty: TypeName(b"h"),
};

pub const IS_ZERO256: JetNode<Turing> = JetNode {
    name: TuringJetName::IsZero256,
    cmr: Cmr(Midstate([
        0x7c, 0x1d, 0x68, 0x82, 0xe5, 0x38, 0x22, 0xe8, 0x0c, 0x5d, 0x7d, 0x36, 0xf8, 0x59, 0xc1,
        0xc4, 0x02, 0xfe, 0x29, 0x10, 0xcf, 0xbc, 0xa2, 0x32, 0xc0, 0x67, 0x97, 0x25, 0x6b, 0xe3,
        0xdb, 0x07,
    ])),
    source_ty: TypeName(b"h"),
    target_ty: TypeName(b"2"),
};
